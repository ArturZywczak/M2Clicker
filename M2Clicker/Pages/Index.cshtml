@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div style="display:flex; flex-direction: row; justify-content: center; align-items: center" oncontextmenu="return false;">

    <div>
      <input type="checkbox" id="debugMode" name="debugMode" onchange="changeDebugMode()">
      <label for="debugMode">Tryb Debugowania</label>
    </div>




    <canvas id="myCanvas" width="400" height="400" style="border:1px solid #000000;">
        Your browser does not support the HTML canvas tag.
    </canvas>

    <ul id="dynamic-list"></ul>
</div>


<script src="~/js/helpers.js" asp-append-version="true"></script>
<script src="~/js/models.js" asp-append-version="true"></script>
<script type="text/javascript" src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    var debugMode = document.getElementById("debugMode").checked;
    
    function changeDebugMode(){
        debugMode = document.getElementById("debugMode").checked;
    }

    const player = new Player("Gracz", new Position(200,250), 0);
    const spawnPoints = [new SpawnPoint(100,100, 1),
        new SpawnPoint(300,100, 2),
        new SpawnPoint(100,300, 3),
        new SpawnPoint(300,300, 4)
    ];
    spawnPoints.forEach(e => {
        for (var i = 0; i<3; i++) e.addMobGroup(e.id, i);
    });
    
    {
        var ul = document.getElementById("dynamic-list");
        var li = document.createElement("li");
        li.setAttribute('id', "MobTest" + 9999);
        li.setAttribute('data-mobid', 9999);
        li.appendChild(document.createTextNode("Lista mobów blisko ciebie:"));
        ul.appendChild(li);
    }
    //BIG INIT TODO
    function onInit(){
        //Pobierz lokacje gracza i dodaj do obiektu

        //Pobierz spawnpointy i stwórz z nich listę obiektów

        //Zespawnuj mobki na niektórych spawnpointach
    }

    var canvas = document.getElementById("myCanvas");
    var ctx = canvas.getContext("2d");

    canvas.addEventListener("click", onClick);

    function onClick(e){

        player.goTo(getMousePos(canvas,e));

    }

    function drawAll(){
        ctx.fillStyle= "black";
        ctx.fillRect(0,0, canvas.clientWidth, canvas.clientHeight)
        drawPlayer();
        drawSpawnPoints();
        drawMobs();

        setTimeout(mapAnim, 20);
    }

    function drawPlayer(){

        ctx.fillStyle = "blue";
        ctx.fillRect(player.pos.x - 2.5 ,player.pos.y - 2.5 ,5,5);
    }

    function drawSpawnPoints(){

        spawnPoints.forEach(e => {

            ctx.fillStyle = "yellow";
            ctx.fillRect(e.x - 2.5 , e.y - 2.5 , 5, 5);

            if (debugMode) {
                ctx.beginPath();
                ctx.strokeStyle = "white";
                ctx.arc(e.x, e.y, 45, 0, 2 * Math.PI);
                ctx.stroke(); 

                ctx.beginPath();
                ctx.strokeStyle = "pink";
                ctx.arc(e.x, e.y, 80, 0, 2 * Math.PI);
                ctx.stroke(); 
            }
        });
    }

    function drawMobs(){

        spawnPoints.forEach(e => {
            
            e.mobGroups.forEach(f => {

                ctx.fillStyle = "pink";
                ctx.fillRect(f.x - 2.5 , f.y - 2.5 , 5, 5);

                if (debugMode){
                    ctx.beginPath();
                    ctx.strokeStyle = "red";
                    ctx.arc(f.x, f.y, 40, 0, 2 * Math.PI);
                    ctx.stroke(); 
                }

                var ul = document.getElementById("dynamic-list");

                f.mobs.forEach(g => {
                    var isNearPlayer = isInRange(player,g,20);
                    var isOnList = false;
                    ul.childNodes.forEach(h => {
                            if ((typeof h.dataset.mobid !== 'undefined') && h.dataset.mobid == g.id) {
                                isOnList = true;
                            }

                    });

                    if(isNearPlayer){
                        ctx.fillStyle = "orange";
                        if (!isOnList) 
                            addItem(g);
                        
                    }
                    else {
                        ctx.fillStyle = "red";
                        if (isOnList) 
                            removeItem(g);
                    }

                    ctx.fillRect(g.pos.x, g.pos.y, 5, 5);


                });

            });

        });
    }


    
    function mapAnim(){


        if (player.pos.walking == true) player.run();

        spawnPoints.forEach(e =>{

            e.mobGroups.forEach(f =>{
                
                f.mobs.forEach(g => {
                    if (!g.pos.walking && !g.pos.attacking)
                        if (Math.random()> 0.995) 
                            g.goTo(getRandomCordsInRadius(f.x,f.y,f.mobPosRadius));
                    if (g.pos.walking) 
                        g.run();
                });
            });    
        });

        drawAll();
    }

    drawAll();

function addItem(mob){
    var ul = document.getElementById("dynamic-list");
    var li = document.createElement("li");
    li.setAttribute('id', "MobTest" + mob.id);
    li.setAttribute('data-mobid', mob.id);
    li.appendChild(document.createTextNode("Siema" + mob.name + "z id " + mob.id));
    ul.appendChild(li);
}

function removeItem(mob){
    var ul = document.getElementById("dynamic-list");
    var item = document.getElementById("MobTest" + mob.id);
    ul.removeChild(item);
}


</script>